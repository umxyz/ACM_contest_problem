{$r+,s+,q+}
program Dune;

uses    dune_lib;

const   maxn = 110;

var     g, p    : array[1..maxn, 0..maxn] of integer;
        g1      : array[1..maxn, 0..maxn] of integer;
        s, d    : array[1..maxn] of longint;
        mark    : array[1..maxn] of boolean;
        n, m, now, tmp : longint;
        sign    : boolean;

function dfs(fa, u : integer) : integer;
var     i, last : integer;
begin
  look(tmp, sign);
  if sign then begin
     dfs := u;
     walk(0);
     exit;
  end;
  mark[u] := false;
  dfs := 0;
  last := fa;
  for i := 0 to d[u] do
    if (g1[u, i] > 0) and mark[g1[u, i]] then begin
       tmp := i - p[u, last];
       if tmp < 0 then tmp := tmp + d[u];
       walk(tmp);
       tmp := dfs(u, g1[u, i]);
       last := g1[u, i];
       if tmp > 0 then begin
          dfs := tmp;
          break;
       end;
    end;

  tmp := p[u, fa] - p[u, last];
  if tmp < 0 then tmp := tmp + d[u];
  walk(tmp);
end;

function nosame(u, no, ds : integer; var who : integer) : boolean;
var     dir, i : integer;
begin
  fillchar(mark, sizeof(mark), true);
  mark[u] := false;
  if g1[u, 0] > 0 then begin
     walk(d[u] - no);
     who := dfs(u, g1[u, 0]);
     if who > 0 then begin
       nosame := false;
       walk(no);
       take_sign;
       exit;
     end;
     dir := 1;
     for i := 1 to no - 1 do
     if mark[g1[u, i]] then begin
       walk(dir);
       who := dfs(u, g1[u, i]);
       if who > 0 then begin
          nosame := false;
          walk(no - i);
          take_sign;
          exit;
       end;
       dir := 1;
     end else inc(dir);
  end else dir := 0;

  walk(dir);
  take_sign;
  inc(n); who := n;
  nosame := true;
end;

function check(fa, dir, no : integer) : boolean;
var     who : integer;
begin
  walk(dir);
  look(d[n + 1], sign);
  if s[d[n + 1]] = 0 then begin
     inc(n);
     inc(s[d[n]]);
     g[n, fa] := 1; g[fa, n] := 1;
     g1[n, 0] := fa; p[n, fa] := 0;
     g1[fa, no] := n; p[fa, n] := no;
     check := true;
  end else begin
     put_sign;
     walk(0);
     if nosame(fa, no, d[n + 1], who)
     then begin
       inc(s[d[who]]);
       g[who, fa] := 1; g[fa, who] := 1;
       g1[who, 0] := fa; p[who, fa] := 0;
       g1[fa, no] := who; p[fa, who] := no;
       check := true
     end else begin
       check := false;
       g[who, fa] := 1; g[fa, who] := 1;
       g1[fa, no] := who; p[fa, who] := no;
       walk(0);
     end;
  end;
end;

procedure search(u : integer);
var     i : integer;
begin
  look(d[u], sign);
  if d[u] = 1 then begin
     walk(0); exit;
  end;

  for i := 1 to d[u] - 1 do
    if check(u, 1, i) then
       search(n);

  if u > 1 then walk(1);
end;

procedure solve;
var     i, j : integer;
begin
  fillchar(s, sizeof(s), 0);
  n := 1;
  look(d[1], sign);
  s[d[1]] := 1;
  if d[1] > 0 then begin
     if check(1, 0, 0) then
        search(n);
     for i := 1 to d[1] - 1 do
       if check(1, 1, i) then search(n);
  end;
  m := 0;
  for i := 1 to n do
    for j := 1 to n do
      if g[i, j] = 1 then inc(m);
  report(n, m shr 1);
end;

begin
  init;
  fillchar(g, sizeof(g), 0);
  fillchar(g1, sizeof(g1), 0);
  fillchar(p, sizeof(p), 0);
  solve;
end.
